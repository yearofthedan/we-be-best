input NoteInput {
    id: String!
    posX: Int!
    posY: Int!
    lockedBy: String
}

input MoveBoardNoteInput {
    id: String!
    posX: Int!
    posY: Int!
}

input LockRoomBoardNoteInput {
    id: ID!
    lockedBy: ID!
}

input UnlockRoomBoardNoteInput {
    id: ID!
}

input UpdateBoardNoteTextInput {
    id: ID!
    text: String!
}

input UpdateBoardNoteStyleInput {
    id: ID!
    style: Int!
}

input AddRoomBoardNoteInput {
    roomId: ID!
    noteId: String!
    text: String!
    style: Int!
    posX: Int!
    posY: Int!
}

input AddMemberInput {
    roomId: ID!
    memberName: String!
}

type Room {
    id: ID!
    members: [Member!]!
    notes: [Note!]!
}

type Note {
    id: String!
    posX: Int!
    posY: Int!
    lockedBy: String
    room: Room
    text: String!
    isDeleted: Boolean
    style: Int
}

type Member {
    id: ID!
    name: String!
    room: Room!
}

type Query {
    room(id: ID!): Room
}

type Subscription {
    memberUpdates(roomId: ID!): Member!
    noteUpdates(roomId: ID!): Note!
}

type Mutation {
    addMember(input: AddMemberInput!): Member!
    moveBoardNote(input: MoveBoardNoteInput!): Note!
    lockRoomBoardNote(input: LockRoomBoardNoteInput!): Note!
    unlockRoomBoardNote(input: UnlockRoomBoardNoteInput!): Note!
    addRoomBoardNote(input: AddRoomBoardNoteInput!): Note!
    updateBoardNoteText(input: UpdateBoardNoteTextInput!): Note!
    updateBoardNoteStyle(input: UpdateBoardNoteStyleInput!): Note!
    deleteBoardNote(id: ID!): Note!
}
